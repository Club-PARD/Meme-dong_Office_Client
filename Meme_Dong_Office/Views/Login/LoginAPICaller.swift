////
////  LoginAPICaller.swift
////  Meme_Dong_Office
////
////  Created by ÍπÄÎØºÏÑ≠ on 12/28/23.
////
//
//import UIKit
//
//let urlLink = "http://13.125.210.242:8080/" // ÏÑúÎ≤Ñ Ï£ºÏÜå
//
//// MARK: - Create _ Îç∞Ïù¥ÌÑ∞Î•º ÏÑúÎ≤ÑÏóê Ï∂îÍ∞ÄÌïòÎäî Ìï®Ïàò
//func makeSignUpPostRequest(with email: String, password: String, name: String) {
//    // ÏÑúÎ≤Ñ ÎßÅÌÅ¨Í∞Ä Ïú†ÏöîÌïúÏßÄ ÌôïÏù∏
//    guard let url = URL(string: urlLink + "api/v1/auth/users") else {
//        print("üö® Invalid URL")
//        return
//    }
//    // request ÏÉùÏÑ±ÌïòÍ∏∞
//    var request = URLRequest(url: url)
//    request.httpMethod = "POST"
//    // json ÌòïÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°Ìï† Í≤ÉÏûÑ
//    request.setValue("application/json", forHTTPHeaderField: "Content-Type")
//
//    // POSTÎ°ú ÏöîÏ≤≠Ìï† Í≤ΩÏö∞ : json ÌòïÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÎÑòÍ∏∞Í∏∞
//    let body:[String: AnyHashable] = [
//        "email": "string",
//        "password": "string",
//        "name": "string"
//    ]
//    request.httpBody = try? JSONSerialization.data(withJSONObject: body, options: .fragmentsAllowed)
//
//    // data task ÏÉùÏÑ±ÌïòÍ∏∞
//    let task = URLSession.shared.dataTask(with: request) { data, _, error in
//        // ÏùëÎãµ Ï≤òÎ¶¨ÌïòÍ∏∞
//        guard let data = data, error == nil else {
//            print("üö® Error: \(error?.localizedDescription ?? "Unknown error")")
//            return
//        }
//        do {
//            // Îç∞Ïù¥ÌÑ∞Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞õÏùÄ Í≤ΩÏö∞, Ìï¥Îãπ Îç∞Ïù¥ÌÑ∞Î•º JSONÏúºÎ°ú ÌååÏã±ÌïòÍ∏∞
//            let response = try JSONSerialization.jsonObject(with: data, options: .allowFragments)
//            // Ï†ïÏÉÅÏ†ÅÏúºÎ°ú responseÎ•º Î∞õÏùÄ Í≤ΩÏö∞, notification centerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïåÎ¶º Î≥¥ÎÇ¥Í∏∞
//            print("‚úÖ success: \(response)")
//        } catch {
//            print("üö® ", error)
//        }
//    }
//    // ÏãúÏûëÌïòÍ∏∞. Íº≠ Ï†ÅÏñ¥Ï§òÏïº Ìï® !
//    task.resume()
//}
//
//// MARK: - Login -> Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Íµ¨ÌòÑÌïòÎäî Ìï®Ïàò
//func makeLoginRequest(with idName: String, name: String, age: Int, part: String, imgUrl: String) {
//    guard let encodedName = idName.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) else {
//        print("Encoding failed")
//        return
//    }
//
//    let urlString = "http://3.35.236.83/pard/update/\(encodedName)"
//
//    guard let url = URL(string: urlString) else {
//        print("üö® Invalid URL")
//        return
//    }
//
//    var request = URLRequest(url: url)
//    request.httpMethod = "PATCH"
//    request.setValue("application/json", forHTTPHeaderField: "Content-Type")
//    
//    let body: [String: Any] = [
//        "email": "string",
//        "password": "string"
//    ]
//
//    request.httpBody = try? JSONSerialization.data(withJSONObject: body, options: .fragmentsAllowed)
//
//    let task = URLSession.shared.dataTask(with: request) { data, _, error in
//        guard let data = data, error == nil else {
//            print("üö® \(error?.localizedDescription ?? "Unknown error")")
//            return
//        }
//        do {
//            let response = try JSONSerialization.jsonObject(with: data, options: .allowFragments)
//            print("‚úÖ success: \(response)")
//            DispatchQueue.main.async {
//                DispatchQueue.main.async {
//                    NotificationCenter.default.post(name: .addNotification, object: nil)
//                }
//            }
//        } catch {
//            print("üö® ", error)
//        }
//    }
//    task.resume()
//}
//
//func deleteRequest(name: String) {
//    let urlString = "http://3.35.236.83/pard/delete/\(name)".addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)
//    
//    guard let url = URL(string: urlString!) else {
//        print("üö® Invalid URL")
//        return
//    }
//    
//    var request = URLRequest(url: url)
//    request.httpMethod = "DELETE"
//
//    let task = URLSession.shared.dataTask(with: request) { data, response, error in
//        if let error = error {
//            print("üö® Error: \(error.localizedDescription)")
//        } else if let data = data {
//            do {
//                let response = try JSONSerialization.jsonObject(with: data, options: .allowFragments)
//                print("‚úÖ Delete success: \(response)")
//                NotificationCenter.default.post(name: .addNotification, object: nil)
//            } catch {
//                print("üö® Error during JSON serialization: \(error.localizedDescription)")
//            }
//        }
//    }
//    task.resume()
//}
